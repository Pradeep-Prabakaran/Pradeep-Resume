@description('Environment name')
@allowed(['dev', 'stage', 'prod'])
param parenvironment string

@description('The name of the project')
param parprojectName string

@description('The name of the Azure Front Door profile')
param parfrontDoorProfileName string = '${parprojectName}-${parenvironment}-fd'

@description('The hostname of the Static Web App to use as origin')
param parstaticWebAppHostname string

@description('Custom domain name for the Front Door')
param parcustomDomainName string

// Create Azure Front Door Profile
resource resfrontDoorProfile 'Microsoft.Cdn/profiles@2023-05-01' = {
  name: parfrontDoorProfileName
  location: 'Global'
  sku: {
    name: 'Standard_AzureFrontDoor'
  }
  properties: {
    originResponseTimeoutSeconds: 60
  }
}

// Create Front Door Endpoint
resource resfrontDoorEndpoint 'Microsoft.Cdn/profiles/afdEndpoints@2023-05-01' = {
  parent: resfrontDoorProfile
  name: '${parfrontDoorProfileName}-endpoint'
  location: 'Global'
  properties: {
    enabledState: 'Enabled'
    autoGeneratedDomainNameLabelScope: 'SubscriptionReuse'
  }
}

// Create Origin Group
resource resoriginGroup 'Microsoft.Cdn/profiles/originGroups@2023-05-01' = {
  parent: resfrontDoorProfile
  name: '${parprojectName}-swa-origin-group'
  properties: {
    loadBalancingSettings: {
      sampleSize: 4
      successfulSamplesRequired: 3
      additionalLatencyInMilliseconds: 50
    }
    healthProbeSettings: {
      probePath: '/'
      probeRequestType: 'HEAD'
      probeProtocol: 'Https'
      probeIntervalInSeconds: 100
    }
  }
}

// Create Origin
resource resorigin 'Microsoft.Cdn/profiles/originGroups/origins@2023-05-01' = {
  parent: resoriginGroup
  name: 'static-web-app-origin'
  properties: {
    hostName: parstaticWebAppHostname
    httpPort: 80
    httpsPort: 443
    originHostHeader: parstaticWebAppHostname
    priority: 1
    weight: 1000
    enabledState: 'Enabled'
    enforceCertificateNameCheck: true
  }
}

// Create Route
resource resroute 'Microsoft.Cdn/profiles/afdEndpoints/routes@2023-05-01' = {
  parent: resfrontDoorEndpoint
  name: 'default-route'
  properties: {
    originGroup: {
      id: resoriginGroup.id
    }
    supportedProtocols: ['Http', 'Https']
    patternsToMatch: ['/*']
    forwardingProtocol: 'HttpsOnly'
    linkToDefaultDomain: 'Enabled'
    httpsRedirect: 'Enabled'
  }
}

// Create custom domain
resource rescustomDomain 'Microsoft.Cdn/profiles/customDomains@2023-05-01' = if (!empty(parcustomDomainName)) {
  parent: resfrontDoorProfile
  name: replace(parcustomDomainName, '.', '-')
  properties: {
    hostName: parcustomDomainName
    tlsSettings: {
      certificateType: 'ManagedCertificate'
      minimumTlsVersion: 'TLS12'
    }
  }
}

// Associate custom domain with route if specified
resource resrroutecustomDomainAssociation 'Microsoft.Cdn/profiles/afdEndpoints/routes@2023-05-01' = if (!empty(parcustomDomainName)) {
  parent: resfrontDoorEndpoint
  name: 'custom-domain-route'
  properties: {
    customDomains: [
      {
        id: rescustomDomain.id
      }
    ]
    originGroup: {
      id: resoriginGroup.id
    }
    supportedProtocols: ['Https']
    patternsToMatch: ['/*']
    forwardingProtocol: 'HttpsOnly'
    linkToDefaultDomain: 'Disabled'
    httpsRedirect: 'Enabled'
    enabledState: 'Enabled'
  }
  dependsOn: [
    resorigin
  ]
}

//Outputs
output frontDoorEndpointUrl string = resfrontDoorEndpoint.properties.hostName
output frontDoorId string = resfrontDoorProfile.properties.frontDoorId
